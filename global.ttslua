#include const

function onload()

    --ustawienie kamery na menu dla gracza hosta
    local gracze = getSeatedPlayers()
    biom_con = true
    marker_ready = true

    for i, obj in pairs(gracze) do
        if Player[obj].host then
            Player[obj].lookAt({
                position = cons.poz.poz_scenario,
                pitch    = 65,
                yaw      = 0,
                distance = 20,
            })
            break
        end
    end
end

function update ()
end

function slice(tbl, first, last, step)--obcina podaną tablicę
  local sliced = {}

  for i = first or 1, last or #tbl, step or 1 do
    sliced[#sliced+1] = tbl[i]
  end

  return sliced
end

menu={}--tablica warunków do rozłożenia kart według scenariusza
    menu["05a789"]=function()        --1. Rozbitkowie
        index_wolnych = 1
        liczba_rund = 12
        tasuj(cons.guid.tasuj)--tasowanie przed rozdaniem
        Wait.time(function()--rozdawanie kart
            z_decka(cons.guid.deck.scenariusze,{cons.guid.scenario[1]},cons.poz.poz_scenario,false)
            z_decka(cons.guid.deck.kar_wraku,1,cons.poz.poz_akcja,true)
            z_decka(cons.guid.deck.kar_przedm_start,2,cons.poz.poz_prz_sta_dol,true)
            z_decka(cons.guid.deck.kar_pom_start,9,cons.poz.poz_kar_pom_start,false)
            index_wolnych = index_wolnych + 9
            z_decka(cons.guid.deck.kar_dod_pom,5,slice(cons.poz.poz_kar_pom_start,index_wolnych),false)
            index_wolnych = index_wolnych + 5
            z_decka(cons.guid.deck.kar_scenariuszy,{cons.guid.przed_scen[12].guid,cons.guid.przed_scen[15].guid},cons.poz.poz_kar_sce_plansza,false)
            z_decka(cons.guid.deck.kar_pyt,6,cons.poz.poz_wydarzenie,false)
            z_decka(cons.guid.deck.kar_ksi,6,cons.poz.poz_wydarzenie,false)
            z_decka(cons.guid.deck.wyspa,{cons.guid.kafle[8].guid},cons.poz.poz_kafli.plaza,true)
        end,1)
        Wait.time(function()
            z_decka(cons.guid.deck.zna_niebieski,4,cons.poz.poz_zna_prz_sta,false)--biale znaczniki do przedmiotow
            piony(cons.guid.znaczniki.runda,cons.poz.poz_rundy_sce[1])--znacznik rundy
            piony(cons.guid.znaczniki.oboz,{cons.poz.poz_kafli.plaza[1],cons.poz.poz_kafli.plaza[2],cons.poz.poz_kafli.plaza[3]+1.68})--znacznik obozu
        end,3)
        lastShuffle()
    end
    menu["6c484a"]=function()        --2. przekleta wyspa
        index_wolnych = 1
        liczba_rund = 10
        tasuj(cons.guid.tasuj)--tasowanie przed rozdaniem
        Wait.time(function()--rozdawanie kart
            z_decka(cons.guid.deck.scenariusze,{cons.guid.scenario[2]},cons.poz.poz_scenario,false)
            z_decka(cons.guid.deck.kar_wraku,1,cons.poz.poz_akcja,true)
            z_decka(cons.guid.deck.kar_przedm_start,2,cons.poz.poz_prz_sta_dol,true)
            z_decka(cons.guid.deck.kar_pom_start,9,cons.poz.poz_kar_pom_start,false)
            index_wolnych = index_wolnych + 9
            z_decka(cons.guid.deck.kar_dod_pom,5,slice(cons.poz.poz_kar_pom_start,index_wolnych),false)
            index_wolnych = index_wolnych + 5
            z_decka(cons.guid.deck.kar_scenariuszy,{cons.guid.przed_scen[3].guid,cons.guid.przed_scen[17].guid},cons.poz.poz_kar_sce_plansza,false)
            z_decka(cons.guid.deck.kar_pyt,5,cons.poz.poz_wydarzenie,false)
            z_decka(cons.guid.deck.kar_ksi,5,cons.poz.poz_wydarzenie,false)
            z_decka(cons.guid.deck.wyspa,{cons.guid.kafle[8].guid},cons.poz.poz_kafli.plaza,true)
        end,1)
        Wait.time(function()
            z_decka(cons.guid.deck.zna_niebieski,4,cons.poz.poz_zna_prz_sta,false)--biale znaczniki do przedmiotow
            piony(cons.guid.znaczniki.runda,cons.poz.poz_rundy_sce[2])--znacznik rundy
            piony(cons.guid.znaczniki.oboz,{cons.poz.poz_kafli.plaza[1],cons.poz.poz_kafli.plaza[2],cons.poz.poz_kafli.plaza[3]+1.68})--znacznik obozu
        end,3)
        lastShuffle()
    end
    menu["5ce8f2"]=function()       --3. jenny w opalach
        index_wolnych = 1
        liczba_rund = 8
        tasuj(cons.guid.tasuj)--tasowanie przed rozdaniem
        Wait.time(function()--rozdawanie kart
            z_decka(cons.guid.deck.scenariusze,{cons.guid.scenario[3]},cons.poz.poz_scenario,false)
            z_decka(cons.guid.deck.kar_wraku,1,cons.poz.poz_akcja,true)
            obj2 = z_decka(cons.guid.deck.kar_przedm_start,{"c4e578"},{0,1,0},false)
            z_decka(cons.guid.deck.kar_przedm_start,2,cons.poz.poz_prz_sta_dol,true)
            z_decka(cons.guid.deck.kar_pom_start,9,cons.poz.poz_kar_pom_start,false)
            index_wolnych = index_wolnych + 9
            z_decka(cons.guid.deck.kar_dod_pom,5,slice(cons.poz.poz_kar_pom_start,index_wolnych),false)
            index_wolnych = index_wolnych + 5
            z_decka(cons.guid.deck.kar_scenariuszy,{cons.guid.przed_scen[10].guid,cons.guid.przed_scen[16].guid},cons.poz.poz_kar_sce_plansza,false)
            z_decka(cons.guid.deck.kar_pyt,4,cons.poz.poz_wydarzenie,false)
            z_decka(cons.guid.deck.kar_ksi,4,cons.poz.poz_wydarzenie,false)
            z_decka(cons.guid.deck.wyspa,{cons.guid.kafle[8].guid},cons.poz.poz_kafli.plaza,true)
        end,1)
        Wait.time(function()
            z_decka(cons.guid.deck.zna_niebieski,4,cons.poz.poz_zna_prz_sta,false)--biale znaczniki do przedmiotow
            piony(cons.guid.znaczniki.runda,cons.poz.poz_rundy_sce[3])--znacznik rundy
            piony(cons.guid.znaczniki.oboz,{cons.poz.poz_kafli.plaza[1],cons.poz.poz_kafli.plaza[2],cons.poz.poz_kafli.plaza[3]+1.68})--znacznik obozu
            copy({getObjectFromGUID(cons.guid.znaczniki.zycie)})
            paste({
                position     = cons.poz.poz_jenny,-- Vector  [x=0, y=3, z=0],
                snap_to_grid = false-- boolean [false],
            })
            destroyObject(obj2)
        end,3)

        lastShuffle()
    end
    menu["525bec"]=function()       --4. wyspa ognia
        index_wolnych = 1
        liczba_rund = 10
        tasuj(cons.guid.tasuj)--tasowanie przed rozdaniem
        Wait.time(function()--rozdawanie kart
            z_decka(cons.guid.deck.scenariusze,{cons.guid.scenario[4]},cons.poz.poz_scenario,false)
            z_decka(cons.guid.deck.kar_wraku,1,cons.poz.poz_akcja,true)
            z_decka(cons.guid.deck.kar_przedm_start,2,cons.poz.poz_prz_sta_dol,true)
            z_decka(cons.guid.deck.kar_pom_start,9,cons.poz.poz_kar_pom_start,false)
            index_wolnych = index_wolnych + 9
            z_decka(cons.guid.deck.kar_dod_pom,5,slice(cons.poz.poz_kar_pom_start,index_wolnych),false)
            index_wolnych = index_wolnych + 5
            z_decka(cons.guid.deck.kar_scenariuszy,{cons.guid.przed_scen[11].guid,cons.guid.przed_scen[18].guid},cons.poz.poz_kar_sce_plansza,false)
            z_decka(cons.guid.deck.kar_pyt,5,cons.poz.poz_wydarzenie,false)
            z_decka(cons.guid.deck.kar_ksi,5,cons.poz.poz_wydarzenie,false)
            z_decka(cons.guid.deck.wyspa,{cons.guid.kafle[8].guid},cons.poz.poz_kafli.wulkan,false)
            z_decka(cons.guid.deck.wyspa,{cons.guid.kafle[10].guid},cons.poz.poz_kafli.wulkan_start,true)
        end,1)
        Wait.time(function()
            z_decka(cons.guid.deck.zna_niebieski,4,cons.poz.poz_zna_prz_sta,false)--biale znaczniki do przedmiotow
            piony(cons.guid.znaczniki.runda,cons.poz.poz_rundy_sce[4])--znacznik rundy
            piony(cons.guid.znaczniki.bron,cons.poz.poz_broni1)--znacznik broni
            piony(cons.guid.znaczniki.oboz,{cons.poz.poz_kafli.wulkan_start[1],cons.poz.poz_kafli.wulkan_start[2],cons.poz.poz_kafli.wulkan_start[3]+1.68})--znacznik obozu
            odwracaj({cons.guid.przed_stale[5].guid,cons.guid.przed_stale[9].guid},true)
        end,3)
        lastShuffle()
    end
    menu["125393"]=function()       --5. wyspa kanibali
        index_wolnych = 1
        liczba_rund = 9
        tasuj(cons.guid.tasuj)--tasowanie przed rozdaniem
        Wait.time(function()--rozdawanie kart
            z_decka(cons.guid.deck.scenariusze,{cons.guid.scenario[5]},cons.poz.poz_scenario,false)
            z_decka(cons.guid.deck.kar_wraku,1,cons.poz.poz_akcja,true)
            z_decka(cons.guid.deck.kar_przedm_start,{cons.guid.przed_start[4],cons.guid.przed_start[7]},cons.poz.poz_prz_sta_dol,true)
            z_decka(cons.guid.deck.kar_pom_start,9,cons.poz.poz_kar_pom_start,false)
            index_wolnych = index_wolnych + 9
            z_decka(cons.guid.deck.kar_dod_pom,5,slice(cons.poz.poz_kar_pom_start,index_wolnych),false)
            index_wolnych = index_wolnych + 5
            z_decka(cons.guid.deck.kar_scenariuszy,{cons.guid.przed_scen[13].guid,cons.guid.przed_scen[19].guid},cons.poz.poz_kar_sce_plansza,false)
            z_decka(cons.guid.deck.kar_pyt,5,cons.poz.poz_wydarzenie,false)
            z_decka(cons.guid.deck.kar_ksi,4,cons.poz.poz_wydarzenie,false)
            z_decka(cons.guid.deck.wyspa,{cons.guid.kafle[8].guid},cons.poz.poz_kafli.plaza,true)
            z_decka(cons.guid.deck.wyspa,{cons.guid.kafle[4].guid},cons.poz.poz_kafli.kanibale,false)
        end,1)
        Wait.time(function()
            z_decka(cons.guid.deck.zna_niebieski,4,cons.poz.poz_zna_prz_sta,false)--biale znaczniki do przedmiotow
            piony(cons.guid.znaczniki.runda,cons.poz.poz_rundy_sce[5])--znacznik rundy
            piony(cons.guid.znaczniki.oboz,{cons.poz.poz_kafli.plaza[1],cons.poz.poz_kafli.plaza[2],cons.poz.poz_kafli.plaza[3]+1.68})--znacznik obozu
        end,3)
        lastShuffle()
    end
    menu["8dc2fd"]=function()       --6. rodzina robinsonow
        index_wolnych = 1
        liczba_rund = 12
        tasuj(cons.guid.tasuj)--tasowanie przed rozdaniem
        Wait.time(function()--rozdawanie kart
            z_decka(cons.guid.deck.scenariusze,{cons.guid.scenario[6]},cons.poz.poz_scenario,false)
            z_decka(cons.guid.deck.kar_wraku,1,cons.poz.poz_akcja,true)
            z_decka(cons.guid.deck.kar_przedm_start,2,cons.poz.poz_prz_sta_dol,true)
            z_decka(cons.guid.deck.kar_pom_start,9,cons.poz.poz_kar_pom_start,false)
            index_wolnych = index_wolnych + 9
            z_decka(cons.guid.deck.kar_dod_pom,9,slice(cons.poz.poz_kar_pom_start,index_wolnych),false)
            index_wolnych = index_wolnych + 9
            z_decka(cons.guid.deck.kar_scenariuszy,{cons.guid.przed_scen[14].guid,cons.guid.przed_scen[2].guid},cons.poz.poz_kar_sce_plansza,false)
            z_decka(cons.guid.deck.kar_pyt,6,cons.poz.poz_wydarzenie,false)
            z_decka(cons.guid.deck.kar_ksi,6,cons.poz.poz_wydarzenie,false)
            z_decka(cons.guid.deck.wyspa,{cons.guid.kafle[8].guid},cons.poz.poz_kafli.plaza,true)
        end,1)
        Wait.time(function()
            z_decka(cons.guid.deck.zna_niebieski,4,cons.poz.poz_zna_prz_sta,false)--biale znaczniki do przedmiotow
            piony(cons.guid.znaczniki.runda,cons.poz.poz_rundy_sce[6])--znacznik rundy
            piony(cons.guid.znaczniki.oboz,{cons.poz.poz_kafli.plaza[1],cons.poz.poz_kafli.plaza[2],cons.poz.poz_kafli.plaza[3]+1.68})--znacznik obozu
        end,3)
        lastShuffle()
    end
    menu["4b3a6e"]=function()       --7. king kong
        index_wolnych = 1
        liczba_rund = 10
        tasuj(cons.guid.tasuj)--tasowanie przed rozdaniem
        Wait.time(function()--rozdawanie kart
            z_decka(cons.guid.deck.scenariusze,{cons.guid.scenario[7]},cons.poz.poz_scenario,false)
            z_decka(cons.guid.deck.kar_wraku,1,cons.poz.poz_akcja,true)
            z_decka(cons.guid.deck.kar_przedm_start,2,cons.poz.poz_prz_sta_dol,true)
            z_decka(cons.guid.deck.kar_pom_start,9,cons.poz.poz_kar_pom_start,false)
            index_wolnych = index_wolnych + 9
            z_decka(cons.guid.deck.kar_dod_pom,5,slice(cons.poz.poz_kar_pom_start,index_wolnych),false)
            index_wolnych = index_wolnych + 5
            z_decka(cons.guid.deck.kar_scenariuszy,{cons.guid.przed_scen[1].guid,cons.guid.przed_scen[6].guid},cons.poz.poz_kar_sce_plansza,false)
            z_decka(cons.guid.deck.kar_pyt,5,cons.poz.poz_wydarzenie,false)
            z_decka(cons.guid.deck.kar_ksi,5,cons.poz.poz_wydarzenie,false)
            z_decka(cons.guid.deck.wyspa,{cons.guid.kafle[8].guid},cons.poz.poz_kafli.plaza,true)
        end,1)
        Wait.time(function()
            z_decka(cons.guid.deck.zna_niebieski,4,cons.poz.poz_zna_prz_sta,false)--biale znaczniki do przedmiotow
            piony(cons.guid.znaczniki.runda,cons.poz.poz_rundy_sce[7])--znacznik rundy
            piony(cons.guid.znaczniki.oboz,{cons.poz.poz_kafli.plaza[1],cons.poz.poz_kafli.plaza[2],cons.poz.poz_kafli.plaza[3]+1.68})--znacznik obozu
            odwracaj(cons.guid.znaczniki.oboz,180)
        end,3)
        lastShuffle()
    end
    menu["ea58a6"]=function()       --8. przyrodnik
        index_wolnych = 1
        liczba_rund = 12
        tasuj(cons.guid.tasuj)--tasowanie przed rozdaniem
        Wait.time(function()--rozdawanie kart
            z_decka(cons.guid.deck.scenariusze,{cons.guid.scenario[8]},cons.poz.poz_scenario,false)
            z_decka(cons.guid.deck.kar_wraku,1,cons.poz.poz_akcja,true)
            z_decka(cons.guid.deck.kar_przedm_start,2,cons.poz.poz_prz_sta_dol,true)
            z_decka(cons.guid.deck.kar_pom_start,9,cons.poz.poz_kar_pom_start,false)
            index_wolnych = index_wolnych + 9
            z_decka(cons.guid.deck.kar_dod_pom,{cons.guid.przed_pomysl[12].guid},slice(cons.poz.poz_kar_pom_start,index_wolnych),false)
            index_wolnych = index_wolnych + 1
            z_decka(cons.guid.deck.kar_dod_pom,4,slice(cons.poz.poz_kar_pom_start,index_wolnych),false)
            index_wolnych = index_wolnych + 4
            z_decka(cons.guid.deck.kar_scenariuszy,{cons.guid.przed_scen[7].guid,cons.guid.przed_scen[9].guid},cons.poz.poz_kar_sce_plansza,false)
            z_decka(cons.guid.deck.kar_pyt,6,cons.poz.poz_wydarzenie,false)
            z_decka(cons.guid.deck.kar_ksi,6,cons.poz.poz_wydarzenie,false)
            z_decka(cons.guid.deck.wyspa,{cons.guid.kafle[8].guid},cons.poz.poz_kafli.plaza,true)
        end,1)
        Wait.time(function()
            z_decka(cons.guid.deck.zna_niebieski,4,cons.poz.poz_zna_prz_sta,false)--biale znaczniki do przedmiotow
            piony(cons.guid.znaczniki.runda,cons.poz.poz_rundy_sce[8])--znacznik rundy
            copy({getObjectFromGUID(cons.guid.znaczniki.zycie)})
            paste({
                position     = cons.poz.poz_przyrodnika,-- Vector  [x=0, y=3, z=0],
                snap_to_grid = false-- boolean [false],
            })
            piony(cons.guid.znaczniki.oboz,{cons.poz.poz_kafli.plaza[1],cons.poz.poz_kafli.plaza[2],cons.poz.poz_kafli.plaza[3]+1.68})--znacznik obozu
        end,3)
        lastShuffle()
    end
    menu["6cb212"]=function()       --9. lowcy
        index_wolnych = 1
        liczba_rund = 10
        tasuj(cons.guid.tasuj)--tasowanie przed rozdaniem
        Wait.time(function()--rozdawanie kart
            z_decka(cons.guid.deck.scenariusze,{cons.guid.scenario[9]},cons.poz.poz_scenario,false)
            z_decka(cons.guid.deck.kar_wraku,1,cons.poz.poz_akcja,true)
            z_decka(cons.guid.deck.kar_przedm_start,2,cons.poz.poz_prz_sta_dol,true)
            z_decka(cons.guid.deck.kar_pom_start,9,cons.poz.poz_kar_pom_start,false)
            index_wolnych = index_wolnych + 9
            z_decka(cons.guid.deck.kar_dod_pom,5,slice(cons.poz.poz_kar_pom_start,index_wolnych),false)
            index_wolnych = index_wolnych + 5
            z_decka(cons.guid.deck.kar_scenariuszy,{cons.guid.przed_scen[4].guid,cons.guid.przed_scen[5].guid},cons.poz.poz_kar_sce_plansza,false)
            z_decka(cons.guid.deck.kar_pyt,5,cons.poz.poz_wydarzenie,false)
            z_decka(cons.guid.deck.kar_ksi,5,cons.poz.poz_wydarzenie,false)
            z_decka(cons.guid.deck.kar_pyt,3,cons.poz.poz_kart_wyd_9,false)--dodatkowe karty wydarzen
            z_decka(cons.guid.deck.kar_ksi,3,slice(cons.poz.poz_kart_wyd_9,4),false)--dodatkowe karty wydarzen
            z_decka(cons.guid.deck.kar_bestie,slice(cons.guid.bestie_9,6-liczbaBestii9()+1),cons.poz.poz_bestii_9,false)--dodatkowe bestie do polowania pod scenariuszem
            z_decka(cons.guid.deck.zna_bestii,1,cons.poz.poz_bestii_polowanie,false)--znacznik sily bestii
            z_decka(cons.guid.deck.wyspa,{cons.guid.kafle[8].guid},cons.poz.poz_kafli.plaza,true)--kafel startowy
        end,1)
        Wait.time(function()
            z_decka(cons.guid.deck.zna_niebieski,4,cons.poz.poz_zna_prz_sta,false)--niebieskie znaczniki do przedmiotow
            piony(cons.guid.znaczniki.runda,cons.poz.poz_rundy_sce[9])--znacznik rundy
            piony(cons.guid.znaczniki.palisada,cons.poz.poz_palisada)--znacznik palisady
            piony(cons.guid.znaczniki.bron,cons.poz.poz_broni1)--znacznik broni
            piony(cons.guid.znaczniki.oboz,{cons.poz.poz_kafli.plaza[1],cons.poz.poz_kafli.plaza[2],cons.poz.poz_kafli.plaza[3]+1.68})--znacznik obozu
            odwracaj(cons.guid.znaczniki.oboz,180)--odwraca znacznik obozu na schronienie
        end,3)
        lastShuffle()
    end
    menu["3071ad"]=function()       --10. sladami doktora livingstone'a
        index_wolnych = 1
        liczba_rund = 10
        tasuj(cons.guid.tasuj)--tasowanie przed rozdaniem
        Wait.time(function()--rozdawanie kart
            z_decka(cons.guid.deck.scenariusze,{cons.guid.scenario[10]},cons.poz.poz_scenario,false)
            local obj2 = z_decka(cons.guid.deck.scenariusze,{cons.guid.scenario[11]},cons.poz.poz_scenario_11,{45.00, 180.00, 180.00})
            obj2.setLock(true)
            obj2.setScale({26, 1.00, 26})
            z_decka(cons.guid.deck.kar_wraku,1,cons.poz.poz_akcja,true)
            z_decka(cons.guid.deck.kar_przedm_start,2,cons.poz.poz_prz_sta_dol,true)
            z_decka(cons.guid.deck.kar_pom_start,{cons.guid.przed_stale[4].guid,cons.guid.przed_stale[5].guid,cons.guid.przed_stale[8].guid},cons.poz.poz_kar_pom_start,true)
            index_wolnych = index_wolnych + 3
            z_decka(cons.guid.deck.kar_dod_pom,{cons.guid.przed_pomysl[4].guid,cons.guid.przed_pomysl[7].guid,cons.guid.przed_pomysl[13].guid},slice(cons.poz.poz_kar_pom_start,index_wolnych),false)
            index_wolnych = index_wolnych + 3
            z_decka(cons.guid.deck.kar_scenariuszy,{cons.guid.przed_scen[8].guid},cons.poz.poz_kar_sce_plansza,false)
            z_decka(cons.guid.deck.kar_pyt,5,cons.poz.poz_wydarzenie,false)
            z_decka(cons.guid.deck.kar_ksi,5,cons.poz.poz_wydarzenie,false)
            z_decka(cons.guid.deck.wyspa,{cons.guid.kafle[8].guid},cons.poz.poz_kafli.plaza,true)--kafel startowy
            z_decka(cons.guid.deck.wyspa,{cons.guid.kafle[2].guid},cons.poz.poz_kafli.plaza,false)--kafel do skasowania
            z_decka(cons.guid.deck.odkrycia,cons.guid.znaczniki.zetony_spec,cons.poz.poz_spe_odkrycia,false)--zetony specjalnych odkryc

        end,1)
        Wait.time(function()
            z_decka(cons.guid.deck.zna_niebieski,4,cons.poz.poz_zna_prz_sta,false)--niebieskie znaczniki do przedmiotow
            piony(cons.guid.znaczniki.runda,cons.poz.poz_rundy_sce[10])--znacznik rundy
            piony(cons.guid.znaczniki.morale,cons.poz.poz_morale1)--znacznik morale
            piony(cons.guid.znaczniki.bron,cons.poz.poz_broni1)--znacznik broni
            piony(cons.guid.znaczniki.oboz,{cons.poz.poz_kafli.plaza[1],cons.poz.poz_kafli.plaza[2],cons.poz.poz_kafli.plaza[3]+1.68})--znacznik obozu
            destroyObject(getObjectFromGUID("9fa5ee"))
        end,3)
        lastShuffle()
    end

function liczbaBestii9()--zwraca liczbe kart bestii do wylozenia w zaleznosci od ilosci graczy
    local best = #(Player.getPlayers())+1
    if best<3 then
        best=3
    elseif best>5 then
        best=5
    end
    return best
end

function delete_menu(menu)-- kasuje przyciski menu
    for i=1, #menu do
        destroyObject(getObjectFromGUID(menu[i]))
    end
end

function odwracaj(tab_karty,flip)--odwraca karty
    if type(flip)=="number" then
        local od = getObjectFromGUID(tab_karty)
        od.rotate({x=0, y=0, z=180})
    else
        for i, object in pairs(tab_karty) do
            local od = getObjectFromGUID(object)
            od.flip()
        end
    end
end

function onObjectPickUp( player_color,  picked_up_object)--akcje zwiazane z wykladaniem znaczników
    --wyklada zielone markery na karty przedmiotów
    if marker_ready then
        biomy = znajdzBiomKart()
        marker_ready=false
        --print("gotowe: ")
        Wait.time(
            function()
                marker_ready=true
            end
        ,2)
    end

    --akcja wykonuje sie na poczatku gry podczas wyboru scenariusza z menu
    if Player[player_color].host and #getSeatedPlayers()>0 and menu[picked_up_object.guid] then
        startGame(picked_up_object.guid,#getSeatedPlayers())
    end
end

function startGame(guid,ile_graczy)--rozkladanie kart postaci, pionów i kart według wybranego scenariusza

    menu[guid]()
    delete_menu(cons.guid.menu)

    local gracze = getSeatedPlayers()

    --wykladanie/kasowanie karty dla 4 graczy
    if #(Player.getPlayers())==4 then
        piony(cons.guid.znaczniki.kar_4graczy,cons.poz.poz_kar_4graczy)
    else
        destroyObject(getObjectFromGUID(cons.guid.znaczniki.kar_4graczy))
    end

    if ile_graczy<3 then
        tab = slice(cons.guid.postacie,2)
    end

    --wykladanie kart postaci wszystkim graczom
    for i,col in pairs(gracze) do
        local gracz = 0
        local offset = 2
        local hand = Player[col].getPlayerHand()
        local target =
            { hand.pos_x + hand.trigger_forward_x * offset
            , 2.5
            , hand.pos_z + hand.trigger_forward_z * offset
            }
        local rotacja =
                {hand.rot_x
                , hand.rot_y-180--make object look out from hand
                , hand.rot_z
                }
        local obj = z_decka(cons.guid.deck.kar_postaci,{tab[math.random(1,#tab)]},target,rotacja)

        for i,pos in pairs(tab) do
            if pos==obj.guid then
                table.remove(tab, i)
                break
            end
        end

        local new_poz = function(offset_x,offset_z)
                            local obj_pos = {x=offset_x,y=0,z=offset_z}
                            local root_pos = {x=0,y=0,z=0}
                            local angle = (-obj.getRotation().y) * math.pi/180
                            local delta_x = obj_pos.x - root_pos.x
                            local delta_z = obj_pos.z - root_pos.z
                            local x = math.cos(angle) * delta_x - math.sin(angle) * delta_z + root_pos.x
                            local z = math.sin(angle) * delta_x + math.cos(angle) * delta_z + root_pos.z
                            return {obj.getPosition().x + x, 2.5, obj.getPosition().z + z}
                        end
        --ustawienie pionow i znacznika zycia
        Wait.time(function()
            if ile_graczy == 1 then
               piony(cons.guid.znaczniki.kar_pies,new_poz(-8,-10),rotacja)
               piony(cons.guid.znaczniki.kar_pieta,new_poz(1,-10),rotacja)
           end
            getObjectFromGUID(cons.guid.znaczniki.zycie).clone({position = new_poz(cons.poz.offset_zycia[obj.guid],3.65)
                            ,snap_to_grid = false}).setRotation(rotacja)
             piony(cons.guid.znaczniki.zna_graczy[obj.guid][1],new_poz(9,0),rotacja)
             piony(cons.guid.znaczniki.zna_graczy[obj.guid][2],new_poz(6,0),rotacja)
             z_decka(cons.guid.deck.kar_umie_postaci,{cons.guid.przed_postaci[obj.guid]}
                    ,slice(cons.poz.poz_kar_umie_pos_plansza,gracz),false).setRotation(rotacja)
            Wait.time(function()
                if ile_graczy == 1 then
                   piony(cons.guid.znaczniki.pion_pies,new_poz(-7,-11.5),rotacja)
                   piony(cons.guid.znaczniki.pion_pieta,new_poz(2,-11.5),rotacja)
                   getObjectFromGUID(cons.guid.znaczniki.zycie).clone({position = new_poz(1.1,-9.6), snap_to_grid = false}).setRotation(rotacja)

               end
           end,2)
         end,2)

         gracz = gracz + 1
    end
    --ustawianie kamer na srodek stolu dla wszystkich graczy
    for _, obj in pairs(gracze) do
        Player[obj].lookAt({
            position = {0,12,-5},
            pitch    = 22,
            yaw      = 0,
            distance = 65,
        })
    end
    broadcastToAll("Wszystko gotowe. Powodzenia.", {0,1,0})
    if biom_con then
        Wait.time(function()
            znajdzBiomKart()
        end,4)
        biom_con = false
    end
end

function z_decka(deck,tab_guid,tab_pozycja,flip)--wyklada karty z podanego stosu lub worka
    --if tab_guid = 1 then pick up random card from the top of deck
    local poz_start = getObjectFromGUID(deck)
    local rot = nil
    local obj = nil
    if type(flip) == "table" then
        rot = flip
        flip = false
    end
    if poz_start.tag == "Bag" then
        if flip then
            rot = {180,0,0}
        end
    end
    if type(tab_guid) == "number" then
        --pick up card
        for i=1, tab_guid do
            if type(tab_pozycja[1]) == "number" then
                obj = poz_start.takeObject({
                    --move to pozycja
                    position=tab_pozycja, smooth=true, rotation=rot, flip=flip
                })
            else
                obj = poz_start.takeObject({
                    --move to pozycja
                    position=tab_pozycja[i], smooth=true, rotation=rot, flip=flip
                })
            end
        end
    return obj

    elseif type(tab_guid) == "table" then
        --pick up specyfic cards and move to pozycja
        for i, object in pairs(tab_guid) do
            if type(tab_pozycja[1]) == "number" then
                obj = poz_start.takeObject({
                    --move to pozycja
                    position=tab_pozycja, guid=object, smooth=true, rotation=rot, flip=flip
                })
            else
                obj = poz_start.takeObject({
                    --move to pozycja
                    position=tab_pozycja[i], guid=object, smooth=true, rotation=rot, flip=flip
                })
            end
        end
        return obj
    end
end

function tasuj(tab_guid)--tasowanie przekazanego obiektu
    if type(tab_guid)=="string" then
        tab_guid={tab_guid}
    end
    for i,guid in pairs(tab_guid) do
        obj = getObjectFromGUID(guid)
        obj.shuffle()
    end
    return true
end

function piony(tab_pion,pozycja,rotacja)--ustawia piony na zadanej pozycji
    if type(tab_pion)=="string" then
        tab_pion={tab_pion}
    end
    for i, pio in pairs(tab_pion) do
        local obj=getObjectFromGUID(pio)
        obj.setPositionSmooth(pozycja, false, false)
        if rotacja~=nil then
            obj.setRotation(rotacja)
        end
    end
end

function findDeck(pos)--wyszukuje stos kart na zadanej pozycji
    local pos2={pos[1],pos[2]-1,pos[3]}
    local hitList = Physics.cast({
        origin       = pos2,
        direction    = {0,1,0},
        type         = 1,
        max_distance = 3,
        debug        = false,
    })

    return hitList
end

function findHitsInRadius(pos,rad)--znajduje obiekty w promieniu i zwraca tablice obiektow - do wyszukiwania wysp
    local pos2 = {pos[1],pos[2]-1,pos[3]}
    local radius = rad
    local hitList = Physics.cast({
        origin       = pos2,
        direction    = {0,1,0},
        type         = 2,
        size         = {radius,radius,radius},
        max_distance = 0.1,
        debug        = false
    })
    return hitList or {}
end

function findHitsInSquare(pos)--znajduje obiekty w promieniu i zwraca tablice obiektow - do wyszukiwania kart przedmiotow
    local pos2 = {pos[1],pos[2]-1,pos[3]}
    local hitList = Physics.cast({
        origin       = pos2,
        direction    = {0,1,0},
        type         = 3,
        size         = {3.2,1,4.75},
        max_distance = 0.2,
        debug        = false
    })
    return hitList or {}
end

function lastShuffle()--czeka na uformowanie sie stosu kart wydarzen i tasuje je
    objekt = nil
    Wait.condition(
        function()
            objekt.shuffle()
        end,
        function()
            hitList = findDeck(cons.poz.poz_wydarzenie)
            if #hitList == 0 then
                return false
            end
            deck=hitList[1].hit_object
            if deck.tag == "Deck" and #deck.getObjects()==liczba_rund then
                objekt=deck
                return true
            end
            return false
        end)
end

function znajdzBiomWyspy()--funkcja do znajdowania wylozonych i odkrytych kafelkow wyspy
    local tab_biomow = {}
    local rot = {}
    local tab = {}
    for i=1, #cons.poz.poz_kafli_wyspy do
        tab = findHitsInRadius(cons.poz.poz_kafli_wyspy[i],5.1)
        find = false
        for j,hit in pairs(tab) do
            if hit.hit_object.guid ~= nil then
                for k,kaf in pairs(cons.guid.kafle) do
                    if kaf.guid == hit.hit_object.guid then
                        rot = getObjectFromGUID(hit.hit_object.guid).getRotation()

                        if rot[3]>150 and not zakrytyBiom(hit.hit_object.guid) then
                            tab_biomow[kaf.biom] = true
                            --print("BIOM: "..kaf.biom)
                            find = true
                        end
                    end
                end
            end
            if find then break end
        end
    end
    return tab_biomow
end

function znajdzPrzedmioty()--znajduje wytworzone przedmioty
    local tab_przed = {}
    for i,deck in pairs({cons.guid.przed_stale,cons.guid.przed_pomysl,cons.guid.przed_scen,cons.guid.przed_post}) do
        for _,obj in pairs(deck) do
            if getObjectFromGUID(obj.guid) ~= nil then
                local rot = getObjectFromGUID(obj.guid).getRotation()
                if rot[3] > 150 then
                    tab_przed[obj.guid] = true
                    --print("wytworzony: "..getObjectFromGUID(obj.guid).getName())
                end
            end
        end
    end
    return tab_przed
end

function zakrytyBiom(kafel)--sprawdza czy biom kafla wyspy jest zakryty czarnym markerem
    for k,kaf in pairs(cons.guid.kafle) do
        if kaf.guid == kafel then
            local kaf_pos = getObjectFromGUID(kafel).getPosition()
            local pos = kaf.markery[5]
            local pos2 = {pos[1]+kaf_pos[1],pos[2],pos[3]+kaf_pos[3]}
            local hit = findHitsInRadius(pos2,1.5)
            for _,blk in pairs(hit) do
                if blk.hit_object.guid ~= nil then
                    if getObjectFromGUID(blk.hit_object.guid).getName() == "Czarny Marker" then
                        return true
                    end
                end
            end
        end
    end
    return false
end

function extraProdukcja(kafel)--zwraca tablice dodatkowych zetonów polozonych na kaflu wyspy
    local zetony = {}
    for k,kaf in pairs(cons.guid.kafle) do
        if kaf.guid == kafel then
            local kaf_pos = getObjectFromGUID(kafel).getPosition()
            local pos = mar
            local pos2 = {pos[1]+kaf_pos[1],pos[2],pos[3]+kaf_pos[3]}
            local hit = findHitsInRadius(pos2,1.5)
            for k,mar in ipairs(kaf.markery) do
                for i,blk in pairs(hit) do
                    if blk.hit_object.guid ~= nil then
                        if getObjectFromGUID(blk.hit_object.guid).getName() == "Czarny Marker" then
                            zetony[mar] = "Czarny Marker"
                        elseif getObjectFromGUID(blk.hit_object.guid).getName() == "Biały Marker" then
                            zetony[mar] = "Biały Marker"
                        elseif getObjectFromGUID(blk.hit_object.guid).getName() == "Niebieski Marker" then
                            zetony[mar] = "Niebieski Marker"
                        elseif getObjectFromGUID(blk.hit_object.guid).getName() == "+1 Drewno" then
                            zetony[mar] = "+1 Drewno"
                        elseif getObjectFromGUID(blk.hit_object.guid).getName() == "-1 Pion Akcji" then
                            zetony[mar] = "-1 Pion Akcji"
                        elseif getObjectFromGUID(blk.hit_object.guid).getName() == "Żeton siły Bestii" then
                            zetony[mar] = "Żeton siły Bestii"
                        elseif getObjectFromGUID(blk.hit_object.guid).getName() == "+1 Pożywienie" then
                            zetony[mar] = "+1 Pożywienie"
                        elseif getObjectFromGUID(blk.hit_object.guid).getName() == "Znacznik Obozu" then
                            zzetony[mar] = "Znacznik Obozu"
                        end
                    end
                end
            end
        end

    end
    return zetony or {}
end

function del_Marker(tab,offset)--usuwa zielone markery z kart
    for _,obj in pairs(tab) do
        if getObjectFromGUID(obj.hit_object.guid).getName() == "Marker pomysłu" then
            local mar = getObjectFromGUID(obj.hit_object.guid)
            piony(mar.guid,{cons.poz.poz_ziel_mark[1],cons.poz.poz_ziel_mark[2]+offset.y,cons.poz.poz_ziel_mark[3]})
            offset.y = offset.y + 1.5
        end
    end
end

function znajdzBiomKart()--odnajduje przedmioty do oznaczenia jako dostepne do wykonania
    local tab_biom_kart = {}
    local rot = {}
    local tab = {}
    tab_biom_wyspy = znajdzBiomWyspy()
    tab_przed_done = znajdzPrzedmioty()
    local offset = {y=0}
    for a, po in pairs({cons.poz.poz_kar_pom_start,cons.poz.poz_kar_sce_plansza,cons.poz.poz_kar_umie_pos_plansza}) do
        for b,pos in pairs(po) do
            find = false
            tab = findHitsInSquare(pos)
            if #tab > 0 then
                local j=1
                for j,hit in pairs(tab) do
                    if hit.hit_object.guid ~= nil then
                        local i=1
                        for i,obj in pairs({cons.guid.przed_stale,cons.guid.przed_pomysl,cons.guid.przed_scen,cons.guid.przed_post}) do
                            local k=1
                            for k,kar in pairs(obj) do
                                rot = getObjectFromGUID(hit.hit_object.guid).getRotation()
                                if kar.guid == hit.hit_object.guid then
                                    if type(kar.biom) == "table" and type(kar.przedmiot) == "table" then
                                        if rot[3]<150 and not hasGreenMarker(tab) and tab_biom_wyspy[kar.biom[1]] and tab_biom_wyspy[kar.biom[2]] and tab_przed_done[kar.przedmiot[1]] and tab_przed_done[kar.przedmiot[2]] then
                                            local pos = getObjectFromGUID(hit.hit_object.guid).getPosition()
                                            pos = {pos[1],4,pos[3]+1}
                                            z_decka("6ec5a2",1,pos,false)
                                            find = true
                                        elseif rot[3]<150 and hasGreenMarker(tab) and not tab_biom_wyspy[kar.biom[1]] or not tab_biom_wyspy[kar.biom[2]] or not tab_przed_done[kar.przedmiot[1]] or not tab_przed_done[kar.przedmiot[2]] then
                                            del_Marker(tab,offset)
                                            find = true
                                        elseif rot[3]>150 and hasGreenMarker(tab) then
                                            del_Marker(tab,offset)
                                            find = true
                                        end
                                    elseif type(kar.biom) == "table" and type(kar.przedmiot) == "string" then
                                        if rot[3]<150 and not hasGreenMarker(tab) and tab_biom_wyspy[kar.biom[1]] and tab_biom_wyspy[kar.biom[2]] and tab_przed_done[kar.przedmiot] then
                                            local pos = getObjectFromGUID(hit.hit_object.guid).getPosition()
                                            pos = {pos[1],4,pos[3]+1}
                                            z_decka("6ec5a2",1,pos,false)
                                            find = true
                                        elseif rot[3]<150 and hasGreenMarker(tab) and not tab_biom_wyspy[kar.biom[1]] or not tab_biom_wyspy[kar.biom[2]] or not tab_przed_done[kar.przedmiot] then
                                            del_Marker(tab,offset)
                                            find = true
                                        elseif rot[3]>150 and hasGreenMarker(tab) then
                                            del_Marker(tab,offset)
                                            find = true
                                        end
                                    elseif type(kar.biom) == "string" and type(kar.przedmiot) == "table" then
                                        if rot[3]<150 and not hasGreenMarker(tab) and tab_biom_wyspy[kar.biom] and tab_przed_done[kar.przedmiot[1]] and tab_przed_done[kar.przedmiot[2]] then
                                            local pos = getObjectFromGUID(hit.hit_object.guid).getPosition()
                                            pos = {pos[1],4,pos[3]+1}
                                            z_decka("6ec5a2",1,pos,false)
                                            find = true
                                        elseif rot[3]<150 and hasGreenMarker(tab) and not tab_biom_wyspy[kar.biom] or not tab_przed_done[kar.przedmiot[1]] or not tab_przed_done[kar.przedmiot[2]] then
                                            del_Marker(tab,offset)
                                            find = true
                                        elseif rot[3]>150 and hasGreenMarker(tab) then
                                            del_Marker(tab,offset)
                                            find = true
                                        end
                                    elseif type(kar.biom) == "string" and type(kar.przedmiot) == "string" then
                                        if rot[3]<150 and not hasGreenMarker(tab) and tab_biom_wyspy[kar.biom] and tab_przed_done[kar.przedmiot] then
                                            local pos = getObjectFromGUID(hit.hit_object.guid).getPosition()
                                            pos = {pos[1],4,pos[3]+1}
                                            z_decka("6ec5a2",1,pos,false)
                                            find = true
                                        elseif rot[3]<150 and hasGreenMarker(tab) and not tab_biom_wyspy[kar.biom] or not tab_przed_done[kar.przedmiot] then
                                            del_Marker(tab,offset)
                                            find = true
                                        elseif rot[3]>150 and hasGreenMarker(tab) then
                                            del_Marker(tab,offset)
                                            find = true
                                        end
                                    elseif type(kar.biom) == "string" and not kar.przedmiot then
                                        if rot[3]<150 and not hasGreenMarker(tab) and tab_biom_wyspy[kar.biom] then
                                            local pos = getObjectFromGUID(hit.hit_object.guid).getPosition()
                                            pos = {pos[1],4,pos[3]+1}
                                            z_decka("6ec5a2",1,pos,false)
                                            find = true
                                        elseif rot[3]<150 and hasGreenMarker(tab) and not tab_biom_wyspy[kar.biom] then
                                            del_Marker(tab,offset)
                                            find = true
                                        elseif rot[3]>150 and hasGreenMarker(tab) then
                                            del_Marker(tab,offset)
                                            find = true
                                        end
                                    elseif  type(kar.przedmiot) == "string" and not kar.biom then
                                        if rot[3]<150 and not hasGreenMarker(tab) and tab_przed_done[kar.przedmiot] then
                                            local pos = getObjectFromGUID(hit.hit_object.guid).getPosition()
                                            pos = {pos[1],4,pos[3]+1}
                                            z_decka("6ec5a2",1,pos,false)
                                            find = true
                                        elseif rot[3]>150 and hasGreenMarker(tab) then
                                                del_Marker(tab,offset)
                                                find = true
                                        elseif rot[3]<150 and hasGreenMarker(tab) and not tab_przed_done[kar.przedmiot] then
                                                del_Marker(tab,offset)
                                            find = true
                                        end
                                    elseif type(kar.biom) == "table" and not kar.przedmiot then
                                        if rot[3]<150 and not hasGreenMarker(tab) and tab_biom_wyspy[kar.biom[1]] and tab_biom_wyspy[kar.biom[2]] then
                                            local pos = getObjectFromGUID(hit.hit_object.guid).getPosition()
                                            pos = {pos[1],4,pos[3]+1}
                                            z_decka("6ec5a2",1,pos,false)
                                            find = true
                                        elseif rot[3]<150 and hasGreenMarker(tab) and not tab_biom_wyspy[kar.biom[1]] or not tab_biom_wyspy[kar.biom[2]] then
                                            del_Marker(tab,offset)
                                            find = true
                                        elseif rot[3]>150 and hasGreenMarker(tab) then
                                            del_Marker(tab,offset)
                                            find = true
                                        end
                                    elseif  type(kar.przedmiot) == "table" and not kar.biom then
                                        if rot[3]<150 and not hasGreenMarker(tab) and tab_przed_done[kar.przedmiot[1]] and tab_przed_done[kar.przedmiot[2]] then
                                            local pos = getObjectFromGUID(hit.hit_object.guid).getPosition()
                                            pos = {pos[1],4,pos[3]+1}
                                            z_decka("6ec5a2",1,pos,false)
                                            find = true
                                        elseif rot[3]<150 and hasGreenMarker(tab) and not tab_przed_done[kar.przedmiot[1]] or not tab_przed_done[kar.przedmiot[2]] then
                                            del_Marker(tab,offset)
                                            find = true
                                        elseif rot[3]>150 and hasGreenMarker(tab) then
                                            del_Marker(tab,offset)
                                            find = true
                                        end
                                    end
                                end
                            end
                        end
                    end
                    if find then break end
                end
            end
        end
    end
    return tab_biom_kart
end
function hasGreenMarker(tab)
    for i, mark in pairs(tab) do
        if mark.hit_object.guid ~= nil then
            if getObjectFromGUID(mark.hit_object.guid).getName() == "Marker pomysłu" then
                return true

            end
        end
    end
    return false
end
