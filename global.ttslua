#include const
deckSize = 0
deckWydarzen = nil
function onload()
        --print("dupa")
end

function update ()
end
function slice(tbl, first, last, step)
  local sliced = {}

  for i = first or 1, last or #tbl, step or 1 do
    sliced[#sliced+1] = tbl[i]
  end

  return sliced
end
menu={}
    menu["0ff99d"]=function()        --1. Rozbitkowie
        index_wolnych = 1
        liczba_rund = 12
        tasuj(cons.game.guid.tasuj)--tasowanie przed rozdaniem
        Wait.time(function()--rozdawanie kart
            z_decka(cons.game.guid.deck.scenariusze,{cons.game.guid.scenario[1]},cons.game.positions.poz_scenario,false)
            z_decka(cons.game.guid.deck.kar_wraku,1,cons.game.positions.poz_akcja,true)
            z_decka(cons.game.guid.deck.kar_prz_start,2,cons.game.positions.poz_prz_sta_dol,true)
            z_decka(cons.game.guid.deck.kar_dod_pom,5,cons.game.positions.poz_kar_pom_wolne,false)
            index_wolnych = index_wolnych + 5
            z_decka(cons.game.guid.deck.kar_scenariuszy,{cons.game.guid.przed_scen[12],cons.game.guid.przed_scen[15]},slice(cons.game.positions.poz_kar_pom_wolne,index_wolnych),false)
            index_wolnych = index_wolnych + 2
            z_decka(cons.game.guid.deck.kar_pyt,6,cons.game.positions.poz_wydarzenie,false)
            z_decka(cons.game.guid.deck.kar_ksi,6,cons.game.positions.poz_wydarzenie,false)
            z_decka(cons.game.guid.deck.wyspa,{cons.game.guid.kafle[8]},cons.game.positions.poz_kafli.plaza,true)
            --piony(cons.game.guid.znaczniki.kar_4graczy,cons.game.positions.poz_kar_4graczy)--karta dla 4 graczy
        end,1)
        Wait.time(function()
            z_decka(cons.game.guid.deck.zna_niebieski,4,cons.game.positions.poz_zna_prz_sta,false)--biale znaczniki do przedmiotow
            piony(cons.game.guid.znaczniki.runda,cons.game.positions.poz_rundy_sce[1])--znacznik rundy
            piony(cons.game.guid.znaczniki.oboz,cons.game.positions.poz_kafli.plaza)--znacznik obozu
        end,2)
        lastShuffle()
    end
    menu["f706a8"]=function()        --2. przekleta wyspa
        index_wolnych = 1
        liczba_rund = 10
        tasuj(cons.game.guid.tasuj)--tasowanie przed rozdaniem
        Wait.time(function()--rozdawanie kart
            z_decka(cons.game.guid.deck.scenariusze,{cons.game.guid.scenario[2]},cons.game.positions.poz_scenario,false)
            z_decka(cons.game.guid.deck.kar_wraku,1,cons.game.positions.poz_akcja,true)
            z_decka(cons.game.guid.deck.kar_prz_start,2,cons.game.positions.poz_prz_sta_dol,true)
            z_decka(cons.game.guid.deck.kar_dod_pom,5,cons.game.positions.poz_kar_pom_wolne,false)
            index_wolnych = index_wolnych + 5
            z_decka(cons.game.guid.deck.kar_scenariuszy,{cons.game.guid.przed_scen[3],cons.game.guid.przed_scen[17]},slice(cons.game.positions.poz_kar_pom_wolne,index_wolnych),false)
            index_wolnych = index_wolnych + 2
            z_decka(cons.game.guid.deck.kar_pyt,5,cons.game.positions.poz_wydarzenie,false)
            z_decka(cons.game.guid.deck.kar_ksi,5,cons.game.positions.poz_wydarzenie,false)
            z_decka(cons.game.guid.deck.wyspa,{cons.game.guid.kafle[8]},cons.game.positions.poz_kafli.plaza,true)
            --piony(cons.game.guid.znaczniki.kar_4graczy,cons.game.positions.poz_kar_4graczy)--karta dla 4 graczy
        end,1)
        Wait.time(function()
            z_decka(cons.game.guid.deck.zna_niebieski,4,cons.game.positions.poz_zna_prz_sta,false)--biale znaczniki do przedmiotow
            piony(cons.game.guid.znaczniki.runda,cons.game.positions.poz_rundy_sce[2])--znacznik rundy
            piony(cons.game.guid.znaczniki.oboz,cons.game.positions.poz_kafli.plaza)--znacznik obozu
        end,2)
        lastShuffle()
    end
    menu["b013db"]=function()       --3. jenny w opalach
        index_wolnych = 1
        liczba_rund = 8
        tasuj(cons.game.guid.tasuj)--tasowanie przed rozdaniem
        Wait.time(function()--rozdawanie kart
            z_decka(cons.game.guid.deck.scenariusze,{cons.game.guid.scenario[3]},cons.game.positions.poz_scenario,false)
            z_decka(cons.game.guid.deck.kar_wraku,1,cons.game.positions.poz_akcja,true)
            z_decka(cons.game.guid.deck.kar_prz_start,2,cons.game.positions.poz_prz_sta_dol,true)
            z_decka(cons.game.guid.deck.kar_dod_pom,5,cons.game.positions.poz_kar_pom_wolne,false)
            index_wolnych = index_wolnych + 5
            z_decka(cons.game.guid.deck.kar_scenariuszy,{cons.game.guid.przed_scen[10],cons.game.guid.przed_scen[16]},slice(cons.game.positions.poz_kar_pom_wolne,index_wolnych),false)
            index_wolnych = index_wolnych + 2
            z_decka(cons.game.guid.deck.kar_pyt,4,cons.game.positions.poz_wydarzenie,false)
            z_decka(cons.game.guid.deck.kar_ksi,4,cons.game.positions.poz_wydarzenie,false)
            z_decka(cons.game.guid.deck.wyspa,{cons.game.guid.kafle[8]},cons.game.positions.poz_kafli.plaza,true)
            --piony(cons.game.guid.znaczniki.kar_4graczy,cons.game.positions.poz_kar_4graczy)--karta dla 4 graczy
        end,1)
        Wait.time(function()
            z_decka(cons.game.guid.deck.zna_niebieski,4,cons.game.positions.poz_zna_prz_sta,false)--biale znaczniki do przedmiotow
            piony(cons.game.guid.znaczniki.runda,cons.game.positions.poz_rundy_sce[3])--znacznik rundy
            piony(cons.game.guid.znaczniki.oboz,cons.game.positions.poz_kafli.plaza)--znacznik obozu
            piony(cons.game.guid.znaczniki.zycie,cons.game.positions.poz_jenny)--znacznik zycia Jenny
        end,2)
        lastShuffle()
    end
    menu["b3a1db"]=function()       --4. wyspa ognia
        index_wolnych = 1
        liczba_rund = 10
        tasuj(cons.game.guid.tasuj)--tasowanie przed rozdaniem
        Wait.time(function()--rozdawanie kart
            z_decka(cons.game.guid.deck.scenariusze,{cons.game.guid.scenario[4]},cons.game.positions.poz_scenario,false)
            z_decka(cons.game.guid.deck.kar_wraku,1,cons.game.positions.poz_akcja,true)
            z_decka(cons.game.guid.deck.kar_prz_start,2,cons.game.positions.poz_prz_sta_dol,true)
            z_decka(cons.game.guid.deck.kar_dod_pom,5,cons.game.positions.poz_kar_pom_wolne,false)
            index_wolnych = index_wolnych + 5
            z_decka(cons.game.guid.deck.kar_scenariuszy,{cons.game.guid.przed_scen[11],cons.game.guid.przed_scen[18]},slice(cons.game.positions.poz_kar_pom_wolne,index_wolnych),false)
            index_wolnych = index_wolnych + 2
            z_decka(cons.game.guid.deck.kar_pyt,5,cons.game.positions.poz_wydarzenie,false)
            z_decka(cons.game.guid.deck.kar_ksi,5,cons.game.positions.poz_wydarzenie,false)
            z_decka(cons.game.guid.deck.wyspa,{cons.game.guid.kafle[8]},cons.game.positions.poz_kafli.wulkan,false)
            z_decka(cons.game.guid.deck.wyspa,{cons.game.guid.kafle[10]},cons.game.positions.poz_kafli.wulkan_start,true)
            --piony(cons.game.guid.znaczniki.kar_4graczy,cons.game.positions.poz_kar_4graczy)--karta dla 4 graczy
        end,1)
        Wait.time(function()
            z_decka(cons.game.guid.deck.zna_niebieski,4,cons.game.positions.poz_zna_prz_sta,false)--biale znaczniki do przedmiotow
            piony(cons.game.guid.znaczniki.runda,cons.game.positions.poz_rundy_sce[4])--znacznik rundy
            piony(cons.game.guid.znaczniki.bron,cons.game.positions.poz_broni1)--znacznik broni
            piony(cons.game.guid.znaczniki.oboz,cons.game.positions.poz_kafli.wulkan_start)--znacznik obozu
            odwracaj({cons.game.guid.przed_stale[5],cons.game.guid.przed_stale[9]},true)
        end,2)
        lastShuffle()
    end
    menu["89bd91"]=function()       --5. wyspa kanibali
        index_wolnych = 1
        liczba_rund = 9
        tasuj(cons.game.guid.tasuj)--tasowanie przed rozdaniem
        Wait.time(function()--rozdawanie kart
            z_decka(cons.game.guid.deck.scenariusze,{cons.game.guid.scenario[5]},cons.game.positions.poz_scenario,false)
            z_decka(cons.game.guid.deck.kar_wraku,1,cons.game.positions.poz_akcja,true)
            z_decka(cons.game.guid.deck.kar_prz_start,{cons.game.guid.przed_start[4],cons.game.guid.przed_start[7]},cons.game.positions.poz_prz_sta_dol,true)
            z_decka(cons.game.guid.deck.kar_dod_pom,5,cons.game.positions.poz_kar_pom_wolne,false)
            index_wolnych = index_wolnych + 5
            z_decka(cons.game.guid.deck.kar_scenariuszy,{cons.game.guid.przed_scen[13],cons.game.guid.przed_scen[19]},slice(cons.game.positions.poz_kar_pom_wolne,index_wolnych),false)
            index_wolnych = index_wolnych + 2
            z_decka(cons.game.guid.deck.kar_pyt,5,cons.game.positions.poz_wydarzenie,false)
            z_decka(cons.game.guid.deck.kar_ksi,4,cons.game.positions.poz_wydarzenie,false)
            z_decka(cons.game.guid.deck.wyspa,{cons.game.guid.kafle[8]},cons.game.positions.poz_kafli.plaza,true)
            z_decka(cons.game.guid.deck.wyspa,{cons.game.guid.kafle[4]},cons.game.positions.poz_kafli.kanibale,false)
            --piony(cons.game.guid.znaczniki.kar_4graczy,cons.game.positions.poz_kar_4graczy)--karta dla 4 graczy
        end,1)
        Wait.time(function()
            z_decka(cons.game.guid.deck.zna_niebieski,4,cons.game.positions.poz_zna_prz_sta,false)--biale znaczniki do przedmiotow
            piony(cons.game.guid.znaczniki.runda,cons.game.positions.poz_rundy_sce[5])--znacznik rundy
            --piony(cons.game.guid.znaczniki.bron,cons.game.positions.poz_broni1)--znacznik broni
            piony(cons.game.guid.znaczniki.oboz,cons.game.positions.poz_kafli.plaza)--znacznik obozu
            --odwracaj({cons.game.guid.przed_stale[5],cons.game.guid.przed_stale[9]})
        end,2)
        lastShuffle()
    end
    menu["ed67a2"]=function()       --6. rodzina robinsonow
        index_wolnych = 1
        liczba_rund = 12
        tasuj(cons.game.guid.tasuj)--tasowanie przed rozdaniem
        Wait.time(function()--rozdawanie kart
            z_decka(cons.game.guid.deck.scenariusze,{cons.game.guid.scenario[6]},cons.game.positions.poz_scenario,false)
            z_decka(cons.game.guid.deck.kar_wraku,1,cons.game.positions.poz_akcja,true)
            z_decka(cons.game.guid.deck.kar_prz_start,2,cons.game.positions.poz_prz_sta_dol,true)
            z_decka(cons.game.guid.deck.kar_dod_pom,9,cons.game.positions.poz_kar_pom_wolne,false)
            index_wolnych = index_wolnych + 9
            z_decka(cons.game.guid.deck.kar_scenariuszy,{cons.game.guid.przed_scen[2],cons.game.guid.przed_scen[14]},slice(cons.game.positions.poz_bestii_9,5),false)
            --index_wolnych = index_wolnych + 2
            z_decka(cons.game.guid.deck.kar_pyt,6,cons.game.positions.poz_wydarzenie,false)
            z_decka(cons.game.guid.deck.kar_ksi,6,cons.game.positions.poz_wydarzenie,false)
            z_decka(cons.game.guid.deck.wyspa,{cons.game.guid.kafle[8]},cons.game.positions.poz_kafli.plaza,true)
            --z_decka(cons.game.guid.deck.wyspa,{cons.game.guid.kafle[4]},cons.game.positions.poz_kafli.kanibale,false)
            --piony(cons.game.guid.znaczniki.kar_4graczy,cons.game.positions.poz_kar_4graczy)--karta dla 4 graczy
        end,1)
        Wait.time(function()
            z_decka(cons.game.guid.deck.zna_niebieski,4,cons.game.positions.poz_zna_prz_sta,false)--biale znaczniki do przedmiotow
            piony(cons.game.guid.znaczniki.runda,cons.game.positions.poz_rundy_sce[6])--znacznik rundy
            --piony(cons.game.guid.znaczniki.bron,cons.game.positions.poz_broni1)--znacznik broni
            piony(cons.game.guid.znaczniki.oboz,cons.game.positions.poz_kafli.plaza)--znacznik obozu
            --odwracaj({cons.game.guid.przed_stale[5],cons.game.guid.przed_stale[9]})
        end,2)
        lastShuffle()
    end
    menu["a8aeb3"]=function()       --7. king kong
        index_wolnych = 1
        liczba_rund = 10
        tasuj(cons.game.guid.tasuj)--tasowanie przed rozdaniem
        Wait.time(function()--rozdawanie kart
            z_decka(cons.game.guid.deck.scenariusze,{cons.game.guid.scenario[7]},cons.game.positions.poz_scenario,false)
            z_decka(cons.game.guid.deck.kar_wraku,1,cons.game.positions.poz_akcja,true)
            z_decka(cons.game.guid.deck.kar_prz_start,2,cons.game.positions.poz_prz_sta_dol,true)
            z_decka(cons.game.guid.deck.kar_dod_pom,5,cons.game.positions.poz_kar_pom_wolne,false)
            index_wolnych = index_wolnych + 5
            z_decka(cons.game.guid.deck.kar_scenariuszy,{cons.game.guid.przed_scen[1],cons.game.guid.przed_scen[6]},slice(cons.game.positions.poz_kar_pom_wolne,index_wolnych),false)
            --index_wolnych = index_wolnych + 2
            z_decka(cons.game.guid.deck.kar_pyt,5,cons.game.positions.poz_wydarzenie,false)
            z_decka(cons.game.guid.deck.kar_ksi,5,cons.game.positions.poz_wydarzenie,false)
            z_decka(cons.game.guid.deck.wyspa,{cons.game.guid.kafle[8]},cons.game.positions.poz_kafli.plaza,true)
            --z_decka(cons.game.guid.deck.wyspa,{cons.game.guid.kafle[4]},cons.game.positions.poz_kafli.kanibale,false)
            --piony(cons.game.guid.znaczniki.kar_4graczy,cons.game.positions.poz_kar_4graczy)--karta dla 4 graczy
        end,1)
        Wait.time(function()
            z_decka(cons.game.guid.deck.zna_niebieski,4,cons.game.positions.poz_zna_prz_sta,false)--biale znaczniki do przedmiotow
            piony(cons.game.guid.znaczniki.runda,cons.game.positions.poz_rundy_sce[7])--znacznik rundy
            --piony(cons.game.guid.znaczniki.bron,cons.game.positions.poz_broni1)--znacznik broni
            piony(cons.game.guid.znaczniki.oboz,cons.game.positions.poz_kafli.plaza)--znacznik obozu
            odwracaj(cons.game.guid.znaczniki.oboz,180)
        end,2)
        lastShuffle()
    end
    menu["07a89f"]=function()       --8. przyrodnik
        index_wolnych = 1
        liczba_rund = 12
        tasuj(cons.game.guid.tasuj)--tasowanie przed rozdaniem
        Wait.time(function()--rozdawanie kart
            z_decka(cons.game.guid.deck.scenariusze,{cons.game.guid.scenario[8]},cons.game.positions.poz_scenario,false)
            z_decka(cons.game.guid.deck.kar_wraku,1,cons.game.positions.poz_akcja,true)
            z_decka(cons.game.guid.deck.kar_prz_start,2,cons.game.positions.poz_prz_sta_dol,true)
            z_decka(cons.game.guid.deck.kar_dod_pom,{cons.game.guid.przed_pomysl[12]},cons.game.positions.poz_kar_pom_wolne,false)
            index_wolnych = index_wolnych + 1
            z_decka(cons.game.guid.deck.kar_dod_pom,4,slice(cons.game.positions.poz_kar_pom_wolne,index_wolnych),false)
            index_wolnych = index_wolnych + 4
            z_decka(cons.game.guid.deck.kar_scenariuszy,{cons.game.guid.przed_scen[7],cons.game.guid.przed_scen[9]},slice(cons.game.positions.poz_kar_pom_wolne,index_wolnych),false)
            --index_wolnych = index_wolnych + 2
            z_decka(cons.game.guid.deck.kar_pyt,6,cons.game.positions.poz_wydarzenie,false)
            z_decka(cons.game.guid.deck.kar_ksi,6,cons.game.positions.poz_wydarzenie,false)
            z_decka(cons.game.guid.deck.wyspa,{cons.game.guid.kafle[8]},cons.game.positions.poz_kafli.plaza,true)
        end,1)
        Wait.time(function()
            z_decka(cons.game.guid.deck.zna_niebieski,4,cons.game.positions.poz_zna_prz_sta,false)--biale znaczniki do przedmiotow
            piony(cons.game.guid.znaczniki.runda,cons.game.positions.poz_rundy_sce[8])--znacznik rundy
            --piony(cons.game.guid.znaczniki.bron,cons.game.positions.poz_broni1)--znacznik broni
            piony(cons.game.guid.znaczniki.zycie,cons.game.positions.poz_przyrodnika)--znacznik zycia przyrodnika
            piony(cons.game.guid.znaczniki.oboz,cons.game.positions.poz_kafli.plaza)--znacznik obozu
            --odwracaj(cons.game.guid.znaczniki.oboz,180)
        end,2)
        lastShuffle()
    end
    menu["d4c0c0"]=function()       --9. lowcy
        index_wolnych = 1
        liczba_rund = 10
        tasuj(cons.game.guid.tasuj)--tasowanie przed rozdaniem
        Wait.time(function()--rozdawanie kart
            -- z_decka(cons.game.guid.deck.scenariusze,{cons.game.guid.scenario[9]},cons.game.positions.poz_scenario,false)
            -- z_decka(cons.game.guid.deck.kar_wraku,1,cons.game.positions.poz_akcja,true)
            -- z_decka(cons.game.guid.deck.kar_prz_start,2,cons.game.positions.poz_prz_sta_dol,true)
            -- z_decka(cons.game.guid.deck.kar_dod_pom,5,slice(cons.game.positions.poz_kar_pom_wolne,index_wolnych),false)
            -- index_wolnych = index_wolnych + 5
            -- z_decka(cons.game.guid.deck.kar_scenariuszy,{cons.game.guid.przed_scen[4],cons.game.guid.przed_scen[5]},slice(cons.game.positions.poz_kar_pom_wolne,index_wolnych),false)
            -- --index_wolnych = index_wolnych + 2
            -- z_decka(cons.game.guid.deck.kar_pyt,5,cons.game.positions.poz_wydarzenie,false)
            -- z_decka(cons.game.guid.deck.kar_ksi,5,cons.game.positions.poz_wydarzenie,false)
            z_decka(cons.game.guid.deck.kar_bestie,cons.game.guid.bestie_9,cons.game.positions.poz_bestii_9,false)--dodatkowe bestie do polowania pod scenariuszem
            -- z_decka(cons.game.guid.deck.zna_bestii,1,cons.game.positions.poz_bestii_polowanie,false)--znacznik sily bestii
            -- z_decka(cons.game.guid.deck.wyspa,{cons.game.guid.kafle[8]},cons.game.positions.poz_kafli.plaza,true)
        end,1)
        Wait.time(function()
            -- z_decka(cons.game.guid.deck.zna_niebieski,4,cons.game.positions.poz_zna_prz_sta,false)--niebieskie znaczniki do przedmiotow
            -- piony(cons.game.guid.znaczniki.runda,cons.game.positions.poz_rundy_sce[9])--znacznik rundy
            -- piony(cons.game.guid.znaczniki.palisada,cons.game.positions.poz_palisada)--znacznik palisady
            -- piony(cons.game.guid.znaczniki.bron,cons.game.positions.poz_broni1)--znacznik broni
            -- piony(cons.game.guid.znaczniki.oboz,cons.game.positions.poz_kafli.plaza)--znacznik obozu
            -- odwracaj(cons.game.guid.znaczniki.oboz,180)
        end,2)
        lastShuffle()
    end
    menu["fe284e"]=function()       --10. sladami doktora livingstone'a

    end

function delete_menu(menu)
    for i=1, tablelength(menu) do
        destroyObject(getObjectFromGUID(menu[i]))
    end
end
function findDeck(pos)
pos2={pos[1],pos[2]-1,pos[3]}
    local hitList = Physics.cast({
        origin       = pos2,
        direction    = {0,1,0},
        type         = 1,
        max_distance = 3,
        debug        = false,
    })

    return hitList
end
function odwracaj(tab_karty,flip)
    print(type(flip))
    if type(flip)=="number" then
        local od = getObjectFromGUID(tab_karty)
        od.rotate({x=0, y=0, z=180})
    else
        for i, object in pairs(tab_karty) do
            local od = getObjectFromGUID(object)
            od.flip()
        end
    end
end
function onObjectPickUp( player_color,  picked_up_object)
    --print(picked_up_object.guid)
    if(menu[picked_up_object.guid]) then
        menu[picked_up_object.guid]()
        delete_menu(cons.game.guid.menu)
    end
end

function z_decka(deck,tab_guid,tab_pozycja,flip)
    --if tab_guid = 1 then pick up random card from the top of deck
    local poz_start=getObjectFromGUID(deck)
    if poz_start.tag == "Bag" then
        if flip then
            rot = {180,0,0}
        else
            rot = nil
        end
    end

    if type(tab_guid) == "number" then
        --pick up card
        for i=1, tab_guid do
            if type(tab_pozycja[1]) == "number" then
                poz_start.takeObject({
                    --move to pozycja
                    position=tab_pozycja, smooth=true, rotation=rot, flip=flip
                })
            else
                poz_start.takeObject({
                    --move to pozycja
                    position=tab_pozycja[i], smooth=true, rotation=rot, flip=flip
                })
            end
        end

    elseif type(tab_guid) == "table" then
        --pick up specyfic cards and move to pozycja
    --print("Tab_guid jako tablica")
        for i, object in pairs(tab_guid) do
            if type(tab_pozycja[1]) == "number" then
    --print("Tab_pozycja jako numer")
                poz_start.takeObject({
                    --move to pozycja
                    position=tab_pozycja, guid=object, smooth=true, rotation=rot, flip=flip
                })
            else
    --print("Tab_pozycja jako co?"..type(tab_pozycja[1]))
                poz_start.takeObject({
                    --move to pozycja
                    position=tab_pozycja[i], guid=object, smooth=true, rotation=rot, flip=flip
                })
            end
        end
    end
end

function tasuj(tab_guid)
    if type(tab_guid)=="string" then
        tab_guid={tab_guid}
    end
    for i,guid in pairs(tab_guid) do
                        obj = getObjectFromGUID(guid)
                        obj.shuffle()
    end
    return true
end

function piony(pion_id,pozycja)

    local obj=getObjectFromGUID(pion_id)
    obj.setPositionSmooth(pozycja, false, false)
    --print(pion_id)
end
function tablelength(T)
  local count = 0
  for i in pairs(T) do count = count + 1 end
  return count
end
function lastShuffle()
    objekt = nil
    Wait.condition(
        function()
            objekt.shuffle()
        end,
        function()

            hitList = findDeck(cons.game.positions.poz_wydarzenie)

            if #hitList == 0 then
                return false
            end
            deck=hitList[1].hit_object

            if deck.tag == "Deck" and #deck.getObjects()==liczba_rund then
                objekt=deck
                return true
            end
            return false
        end)
end
